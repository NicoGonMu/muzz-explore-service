// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	store "muzz-explore/internal/store"
)

// DecisionStore is an autogenerated mock type for the DecisionStore type
type DecisionStore struct {
	mock.Mock
}

type DecisionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *DecisionStore) EXPECT() *DecisionStore_Expecter {
	return &DecisionStore_Expecter{mock: &_m.Mock}
}

// CountDecisions provides a mock function with given fields: ctx, filter
func (_m *DecisionStore) CountDecisions(ctx context.Context, filter store.DecisionFilter) (uint64, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for CountDecisions")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, store.DecisionFilter) (uint64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, store.DecisionFilter) uint64); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, store.DecisionFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecisionStore_CountDecisions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountDecisions'
type DecisionStore_CountDecisions_Call struct {
	*mock.Call
}

// CountDecisions is a helper method to define mock.On call
//   - ctx context.Context
//   - filter store.DecisionFilter
func (_e *DecisionStore_Expecter) CountDecisions(ctx interface{}, filter interface{}) *DecisionStore_CountDecisions_Call {
	return &DecisionStore_CountDecisions_Call{Call: _e.mock.On("CountDecisions", ctx, filter)}
}

func (_c *DecisionStore_CountDecisions_Call) Run(run func(ctx context.Context, filter store.DecisionFilter)) *DecisionStore_CountDecisions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(store.DecisionFilter))
	})
	return _c
}

func (_c *DecisionStore_CountDecisions_Call) Return(_a0 uint64, _a1 error) *DecisionStore_CountDecisions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DecisionStore_CountDecisions_Call) RunAndReturn(run func(context.Context, store.DecisionFilter) (uint64, error)) *DecisionStore_CountDecisions_Call {
	_c.Call.Return(run)
	return _c
}

// ListDecisions provides a mock function with given fields: ctx, filter, page
func (_m *DecisionStore) ListDecisions(ctx context.Context, filter store.DecisionFilter, page string) ([]store.Decision, string, error) {
	ret := _m.Called(ctx, filter, page)

	if len(ret) == 0 {
		panic("no return value specified for ListDecisions")
	}

	var r0 []store.Decision
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, store.DecisionFilter, string) ([]store.Decision, string, error)); ok {
		return rf(ctx, filter, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, store.DecisionFilter, string) []store.Decision); ok {
		r0 = rf(ctx, filter, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]store.Decision)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, store.DecisionFilter, string) string); ok {
		r1 = rf(ctx, filter, page)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, store.DecisionFilter, string) error); ok {
		r2 = rf(ctx, filter, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DecisionStore_ListDecisions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDecisions'
type DecisionStore_ListDecisions_Call struct {
	*mock.Call
}

// ListDecisions is a helper method to define mock.On call
//   - ctx context.Context
//   - filter store.DecisionFilter
//   - page string
func (_e *DecisionStore_Expecter) ListDecisions(ctx interface{}, filter interface{}, page interface{}) *DecisionStore_ListDecisions_Call {
	return &DecisionStore_ListDecisions_Call{Call: _e.mock.On("ListDecisions", ctx, filter, page)}
}

func (_c *DecisionStore_ListDecisions_Call) Run(run func(ctx context.Context, filter store.DecisionFilter, page string)) *DecisionStore_ListDecisions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(store.DecisionFilter), args[2].(string))
	})
	return _c
}

func (_c *DecisionStore_ListDecisions_Call) Return(_a0 []store.Decision, _a1 string, _a2 error) *DecisionStore_ListDecisions_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DecisionStore_ListDecisions_Call) RunAndReturn(run func(context.Context, store.DecisionFilter, string) ([]store.Decision, string, error)) *DecisionStore_ListDecisions_Call {
	_c.Call.Return(run)
	return _c
}

// MarkDecisionsAsSeen provides a mock function with given fields: ctx, RecipientUserID, timestamp
func (_m *DecisionStore) MarkDecisionsAsSeen(ctx context.Context, RecipientUserID string, timestamp int64) error {
	ret := _m.Called(ctx, RecipientUserID, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for MarkDecisionsAsSeen")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, RecipientUserID, timestamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecisionStore_MarkDecisionsAsSeen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkDecisionsAsSeen'
type DecisionStore_MarkDecisionsAsSeen_Call struct {
	*mock.Call
}

// MarkDecisionsAsSeen is a helper method to define mock.On call
//   - ctx context.Context
//   - RecipientUserID string
//   - timestamp int64
func (_e *DecisionStore_Expecter) MarkDecisionsAsSeen(ctx interface{}, RecipientUserID interface{}, timestamp interface{}) *DecisionStore_MarkDecisionsAsSeen_Call {
	return &DecisionStore_MarkDecisionsAsSeen_Call{Call: _e.mock.On("MarkDecisionsAsSeen", ctx, RecipientUserID, timestamp)}
}

func (_c *DecisionStore_MarkDecisionsAsSeen_Call) Run(run func(ctx context.Context, RecipientUserID string, timestamp int64)) *DecisionStore_MarkDecisionsAsSeen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *DecisionStore_MarkDecisionsAsSeen_Call) Return(_a0 error) *DecisionStore_MarkDecisionsAsSeen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DecisionStore_MarkDecisionsAsSeen_Call) RunAndReturn(run func(context.Context, string, int64) error) *DecisionStore_MarkDecisionsAsSeen_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertDecision provides a mock function with given fields: ctx, decision
func (_m *DecisionStore) UpsertDecision(ctx context.Context, decision store.Decision) error {
	ret := _m.Called(ctx, decision)

	if len(ret) == 0 {
		panic("no return value specified for UpsertDecision")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, store.Decision) error); ok {
		r0 = rf(ctx, decision)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecisionStore_UpsertDecision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertDecision'
type DecisionStore_UpsertDecision_Call struct {
	*mock.Call
}

// UpsertDecision is a helper method to define mock.On call
//   - ctx context.Context
//   - decision store.Decision
func (_e *DecisionStore_Expecter) UpsertDecision(ctx interface{}, decision interface{}) *DecisionStore_UpsertDecision_Call {
	return &DecisionStore_UpsertDecision_Call{Call: _e.mock.On("UpsertDecision", ctx, decision)}
}

func (_c *DecisionStore_UpsertDecision_Call) Run(run func(ctx context.Context, decision store.Decision)) *DecisionStore_UpsertDecision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(store.Decision))
	})
	return _c
}

func (_c *DecisionStore_UpsertDecision_Call) Return(_a0 error) *DecisionStore_UpsertDecision_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DecisionStore_UpsertDecision_Call) RunAndReturn(run func(context.Context, store.Decision) error) *DecisionStore_UpsertDecision_Call {
	_c.Call.Return(run)
	return _c
}

// NewDecisionStore creates a new instance of DecisionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDecisionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *DecisionStore {
	mock := &DecisionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
